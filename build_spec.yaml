version: "0.1"
component: build
timeoutInSeconds: "1000"
shell: bash
env:
  vaultVariables:
    OCI_REGISTRY_TOKEN: ocid1.vaultsecret.oc1.us-sanjose-1.amaaaaaaeftofsqasqm2uu6dds4zl2aac6su7qr2kxuodtaklttidkzs4c7q
  exportedVariables:
    - BUILDRUN_HASH

steps:
  - type: Command
    name: Check and Install Java 11
    command: >
      echo "Checking current Java version..."

      CURRENT_JAVA_VERSION=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}' | cut -d'.' -f1-2)

      echo "Current Java version is $CURRENT_JAVA_VERSION"

      if [ "$CURRENT_JAVA_VERSION" != "11" ]; then
        echo "Installing Java 11..."
        yum install -y java-11-openjdk-devel || exit 1
        export JAVA_HOME=/usr/lib/jvm/java-11-openjdk
        export PATH=$JAVA_HOME/bin:$PATH
      else
        echo "Java 11 is already installed."
      fi

      java -version || exit 1
  - type: Command
    name: Check and Install Maven
    command: |
      echo "Checking Maven installation..."
      if ! type "mvn" > /dev/null; then
        echo "Maven is not installed. Installing Maven..."
        yum install -y maven || exit 1
      else
        echo "Maven is already installed."
      fi
      mvn -version || exit 1
  - type: Command
    name: Build Application
    command: |
      echo "Starting build process with Maven..."
      export JAVA_HOME=/usr/lib/jvm/java-11-openjdk
      export PATH=$JAVA_HOME/bin:$PATH
      mvn -version
      mvn clean install -DskipTests || exit 1
      echo "Build process complete."
  - type: Command
    name: Define unique image tag
    timeoutInseconds: 40
    command: |
        export BUILDRUN_HASH=`echo S{OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
        echo "BUILDRUN_HASH: " $BUILDRUN_HASH

  - type: Command
    name: Build Docker Images
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}
      for service in feed follow post consumer; do
        echo "Building Docker image for $service..."
        docker build --pull --rm -t $service ./$service
      done

outputArtifacts:
  - name: feed-service
    type: DOCKER_IMAGE
    location: feed-service:latest
  - name: follow-service
    type: DOCKER_IMAGE
    location: follow-service:latest
  - name: post-service-image
    type: DOCKER_IMAGE
    location: post-service:latest
  - name: kafka-consumer-service-image
    type: DOCKER_IMAGE
    location: kafka-consumer-service:latest
  - name: feed-service-manifest
    type: BINARY
    location: ${OCI_PRIMARY_SOURCE_DIR}/k8s/feed/feed.yaml
  - name: follow-service-manifest
    type: BINARY
    location: ${OCI_PRIMARY_SOURCE_DIR}/k8s/follow/follow.yaml
  - name: post-service-manifest
    type: BINARY
    location: ${OCI_PRIMARY_SOURCE_DIR}/k8s/post/post.yaml
  - name: kafka-consumer-service-manifest
    type: BINARY
    location: ${OCI_PRIMARY_SOURCE_DIR}/k8s/consumer/kafka-consumer.yaml
